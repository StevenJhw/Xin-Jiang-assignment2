{"ast":null,"code":"var _jsxFileName = \"/Users/Steven/Desktop/NEU/2024 Spring/5610 Web/Project/conways-game-of-life/src/Grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  rows,\n  cols,\n  cellStates,\n  handleCellClick\n}) => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [livingCells, setLivingCells] = useState(0);\n  const [cntCellDeadCum, setCellDeadCum] = useState([]);\n  const [autoplay, setAutoplay] = useState(false);\n\n  // 切换自动播放的函数\n  const toggleAutoplay = () => {\n    setAutoplay(!autoplay);\n  };\n\n  // 进行单步模拟的函数\n  const progressSimulation = () => {\n    handleStepSimulation();\n  };\n\n  // 使用 useEffect 钩子来启动或停止自动播放\n  useEffect(() => {\n    let intervalId;\n    if (autoplay) {\n      // 如果自动播放激活，则设置定时器来定期调用前进模拟的函数\n      intervalId = setInterval(handleStepSimulation, 100);\n    } else {\n      // 如果自动播放停止，则清除定时器\n      clearInterval(intervalId);\n    }\n\n    // 返回清除定时器的函数，以确保在组件卸载时清除定时器\n    return () => clearInterval(intervalId);\n  }, [autoplay]); // 当 autoplay 状态变化时重新运行 useEffect\n\n  // 初始化网格状态，创建空白的网格\n  useEffect(() => {\n    setGrid(initializeGrid());\n  }, [rows, cols]);\n\n  // 更新网格状态，处理单元格点击事件\n  const updateCell = (row, col) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = !newGrid[row][col]; // 切换单元格状态\n    setGrid(newGrid);\n    setLivingCells(countLivingCells(newGrid));\n\n    // 更新 cntCellDeadCum\n    const newCumGrid = [...cntCellDeadCum];\n    newCumGrid[row][col] += 1;\n    setCellDeadCum(newCumGrid);\n  };\n\n  // 计算当前存活细胞数量\n  const countLivingCells = grid => {\n    let count = 0;\n    grid.forEach(row => {\n      row.forEach(cell => {\n        if (cell) {\n          count++;\n        }\n      });\n    });\n    return count;\n  };\n\n  // 初始化网格\n  const initializeGrid = () => {\n    const newGrid = Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => false));\n    setLivingCells(0);\n    setCellDeadCum(Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => 0)));\n    return newGrid;\n  };\n\n  // 重置网格\n  const handleReset = () => {\n    const newGrid = initializeGrid();\n    setGrid(newGrid);\n  };\n\n  // 进行单步模拟\n  const handleStepSimulation = () => {\n    const newGrid = [];\n    for (let i = 0; i < rows; i++) {\n      const newRow = [];\n      for (let j = 0; j < cols; j++) {\n        const neighbors = countAliveNeighbors(i, j);\n\n        // 根据规则更新细胞状态\n        if (grid[i][j]) {\n          if (neighbors < 2 || neighbors > 3) {\n            newRow.push(false); // 规则 1 和 3：少于2个邻居或多于3个邻居，细胞死亡\n          } else {\n            newRow.push(true); // 规则 2：2 或 3 个邻居，细胞继续存活\n          }\n        } else {\n          if (neighbors === 3) {\n            newRow.push(true); // 规则 4：3 个邻居，死细胞复活\n          } else {\n            newRow.push(false);\n          }\n        }\n      }\n      newGrid.push(newRow);\n    }\n    setGrid(newGrid);\n    setLivingCells(countLivingCells(newGrid));\n\n    // 更新 cntCellDeadCum\n    const newCumGrid = cntCellDeadCum.map(row => row.map(value => value + 1));\n    setCellDeadCum(newCumGrid);\n  };\n\n  // 计算细胞周围的活细胞数量\n  const countAliveNeighbors = (row, col) => {\n    let count = 0;\n    for (let i = row - 1; i <= row + 1; i++) {\n      for (let j = col - 1; j <= col + 1; j++) {\n        if (i !== row || j !== col) {\n          // 检查边界条件以避免越界访问\n          if (i >= 0 && i < rows && j >= 0 && j < cols && grid[i][j]) {\n            count++;\n          }\n        }\n      }\n    }\n    return count;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: [grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n        alive: cell,\n        cntCellDeadCum: cntCellDeadCum[rowIndex][colIndex] // 传递 cntCellDeadCum 的值给 Cell 组件\n        ,\n        onClick: () => {\n          updateCell(rowIndex, colIndex);\n          handleCellClick(rowIndex * cols + colIndex);\n        }\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStepSimulation,\n        children: \"Next Step\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleAutoplay,\n        children: autoplay ? 'Stop Autoplay' : 'Start Autoplay'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Living Cells: \", livingCells]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"CntCellDeadCum: \", JSON.stringify(cntCellDeadCum)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"cLpzSCd4aLAByVi5x0dGS3LFeVs=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","Cell","jsxDEV","_jsxDEV","Grid","rows","cols","cellStates","handleCellClick","_s","grid","setGrid","livingCells","setLivingCells","cntCellDeadCum","setCellDeadCum","autoplay","setAutoplay","toggleAutoplay","progressSimulation","handleStepSimulation","intervalId","setInterval","clearInterval","initializeGrid","updateCell","row","col","newGrid","countLivingCells","newCumGrid","count","forEach","cell","Array","from","length","handleReset","i","newRow","j","neighbors","countAliveNeighbors","push","map","value","className","children","rowIndex","colIndex","alive","onClick","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/Steven/Desktop/NEU/2024 Spring/5610 Web/Project/conways-game-of-life/src/Grid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Cell from './Cell';\n\nconst Grid = ({ rows, cols, cellStates, handleCellClick }) => {\n  const [grid, setGrid] = useState([]);\n  const [livingCells, setLivingCells] = useState(0);\n  const [cntCellDeadCum, setCellDeadCum] = useState([]);\n  const [autoplay, setAutoplay] = useState(false);\n\n  // 切换自动播放的函数\n  const toggleAutoplay = () => {\n    setAutoplay(!autoplay);\n  };\n\n  // 进行单步模拟的函数\n  const progressSimulation = () => {\n    handleStepSimulation();\n  };\n\n  // 使用 useEffect 钩子来启动或停止自动播放\n  useEffect(() => {\n    let intervalId;\n    if (autoplay) {\n      // 如果自动播放激活，则设置定时器来定期调用前进模拟的函数\n      intervalId = setInterval(handleStepSimulation, 100);\n    } else {\n      // 如果自动播放停止，则清除定时器\n      clearInterval(intervalId);\n    }\n\n    // 返回清除定时器的函数，以确保在组件卸载时清除定时器\n    return () => clearInterval(intervalId);\n  }, [autoplay]); // 当 autoplay 状态变化时重新运行 useEffect\n\n  // 初始化网格状态，创建空白的网格\n  useEffect(() => {\n    setGrid(initializeGrid());\n  }, [rows, cols]);\n\n  // 更新网格状态，处理单元格点击事件\n  const updateCell = (row, col) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = !newGrid[row][col]; // 切换单元格状态\n    setGrid(newGrid);\n    setLivingCells(countLivingCells(newGrid));\n\n    // 更新 cntCellDeadCum\n    const newCumGrid = [...cntCellDeadCum];\n    newCumGrid[row][col] += 1;\n    setCellDeadCum(newCumGrid);\n  };\n\n  // 计算当前存活细胞数量\n  const countLivingCells = (grid) => {\n    let count = 0;\n    grid.forEach(row => {\n      row.forEach(cell => {\n        if (cell) {\n          count++;\n        }\n      });\n    });\n    return count;\n  };\n\n  // 初始化网格\n  const initializeGrid = () => {\n    const newGrid = Array.from({ length: rows }, () => Array.from({ length: cols }, () => false));\n    setLivingCells(0);\n    setCellDeadCum(Array.from({ length: rows }, () => Array.from({ length: cols }, () => 0)));\n    return newGrid;\n  }\n\n  // 重置网格\n  const handleReset = () => {\n    const newGrid = initializeGrid();\n    setGrid(newGrid);\n  };\n\n  // 进行单步模拟\n  const handleStepSimulation = () => {\n    const newGrid = [];\n\n    for (let i = 0; i < rows; i++) {\n      const newRow = [];\n\n      for (let j = 0; j < cols; j++) {\n        const neighbors = countAliveNeighbors(i, j);\n\n        // 根据规则更新细胞状态\n        if (grid[i][j]) {\n          if (neighbors < 2 || neighbors > 3) {\n            newRow.push(false); // 规则 1 和 3：少于2个邻居或多于3个邻居，细胞死亡\n          } else {\n            newRow.push(true); // 规则 2：2 或 3 个邻居，细胞继续存活\n          }\n        } else {\n          if (neighbors === 3) {\n            newRow.push(true); // 规则 4：3 个邻居，死细胞复活\n          } else {\n            newRow.push(false);\n          }\n        }\n      }\n\n      newGrid.push(newRow);\n    }\n\n    setGrid(newGrid);\n    setLivingCells(countLivingCells(newGrid));\n\n    // 更新 cntCellDeadCum\n    const newCumGrid = cntCellDeadCum.map(row => row.map(value => value + 1));\n    setCellDeadCum(newCumGrid);\n  };\n\n  // 计算细胞周围的活细胞数量\n  const countAliveNeighbors = (row, col) => {\n    let count = 0;\n\n    for (let i = row - 1; i <= row + 1; i++) {\n      for (let j = col - 1; j <= col + 1; j++) {\n        if (i !== row || j !== col) {\n          // 检查边界条件以避免越界访问\n          if (i >= 0 && i < rows && j >= 0 && j < cols && grid[i][j]) {\n            count++;\n          }\n        }\n      }\n    }\n\n    return count;\n  };\n\n  return (\n    <div className=\"grid\">\n      {grid.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"grid-row\">\n          {row.map((cell, colIndex) => (\n            <Cell\n              key={colIndex}\n              alive={cell}\n              cntCellDeadCum={cntCellDeadCum[rowIndex][colIndex]} // 传递 cntCellDeadCum 的值给 Cell 组件\n              onClick={() => {\n                updateCell(rowIndex, colIndex);\n                handleCellClick(rowIndex * cols + colIndex);\n              }}\n            />\n          ))}\n        </div>\n      ))}\n      <div className=\"controls\">\n        <button onClick={handleReset}>Reset</button>\n        <button onClick={handleStepSimulation}>Next Step</button>\n        <button onClick={toggleAutoplay}>\n          {autoplay ? 'Stop Autoplay' : 'Start Autoplay'}</button>\n        <div>Living Cells: {livingCells}</div>\n        <div>CntCellDeadCum: {JSON.stringify(cntCellDeadCum)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Grid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}