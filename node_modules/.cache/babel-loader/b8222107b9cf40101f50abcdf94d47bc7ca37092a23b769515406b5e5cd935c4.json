{"ast":null,"code":"var _jsxFileName = \"/Users/Steven/Desktop/NEU/2024 Spring/5610 Web/Project/conways-game-of-life/src/Grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  rows,\n  cols,\n  cellStates,\n  handleCellClick\n}) => {\n  _s();\n  const [grid, setGrid] = useState([[]]);\n  const [livingCells, setLivingCells] = useState(0);\n  const [cntCellDeadCum, setCellDeadCum] = useState([[]]);\n  const [autoplay, setAutoplay] = useState(false); // 用于跟踪自动播放的状态变量\n  const [longerLastingMode, setLongerLastingMode] = useState(false); // 新增长寿模式状态\n\n  // 切换自动播放的函数\n  const toggleAutoplay = () => {\n    setAutoplay(!autoplay);\n  };\n  // 切换长寿模式\n  const toggleLongerLastingMode = () => {\n    setLongerLastingMode(!longerLastingMode);\n  };\n\n  // 使用 useEffect 钩子来启动或停止自动播放\n  useEffect(() => {\n    let intervalId;\n    if (autoplay) {\n      // 如果自动播放激活，则设置定时器来定期调用前进模拟的函数\n      intervalId = setInterval(handleStepSimulation, 100);\n    } else {\n      // 如果自动播放停止，则清除定时器\n      clearInterval(intervalId);\n    }\n\n    // 返回清除定时器的函数，以确保在组件卸载时清除定时器\n    return () => clearInterval(intervalId);\n  }, [autoplay, grid]); // 添加所有依赖项\n\n  // 初始化网格状态，创建空白的网格\n  useEffect(() => {\n    setGrid(initializeGrid());\n  }, [rows, cols]);\n\n  // 更新网格状态，处理单元格点击事件\n  const updateCell = (row, col) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = !newGrid[row][col]; // 切换单元格状态\n    setGrid(newGrid);\n    setLivingCells(countLivingCells(newGrid));\n\n    // 创建 newCumGrid 的副本\n    const newCumGrid = [...cntCellDeadCum];\n\n    // 根据条件更新 newCumGrid 的值\n    if (newGrid[row][col] === true) {\n      newCumGrid[row][col] = 0;\n    } else {\n      newCumGrid[row][col] += 1;\n    }\n    setCellDeadCum(newCumGrid);\n  };\n\n  // 计算当前存活细胞数量\n  const countLivingCells = grid => {\n    let count = 0;\n    grid.forEach(row => {\n      row.forEach(cell => {\n        if (cell) {\n          count++;\n        }\n      });\n    });\n    return count;\n  };\n\n  // 修改初始化网格的函数以实现集群设置\n  function initializeGrid() {\n    const newGrid = Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => false));\n\n    // 确定集群的数量和位置\n    const numClusters = Math.floor(rows * cols * 0.05); // 集群数量为网格大小的5%\n    for (let i = 0; i < numClusters; i++) {\n      const clusterRow = Math.floor(Math.random() * rows);\n      const clusterCol = Math.floor(Math.random() * cols);\n      newGrid[clusterRow][clusterCol] = true; // 将集群中心设置为活细胞\n      // 在集群周围生成更多的活细胞\n      for (let dRow = -2; dRow <= 2; dRow++) {\n        for (let dCol = -2; dCol <= 2; dCol++) {\n          const neighborRow = clusterRow + dRow;\n          const neighborCol = clusterCol + dCol;\n          if (neighborRow >= 0 && neighborRow < rows && neighborCol >= 0 && neighborCol < cols && Math.random() < 0.05) {\n            newGrid[neighborRow][neighborCol] = true;\n          }\n        }\n      }\n    }\n    setLivingCells(countLivingCells(newGrid));\n    setCellDeadCum(Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => 1)));\n    const newCntCellDeadCum = Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => 1));\n    // 遍历 newGrid 的所有元素\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        // 如果 newGrid[i][j] 的值为真（即细胞存活），将相应位置的 newCntCellDeadCum 设置为0\n        if (newGrid[i][j] === true) {\n          newCntCellDeadCum[i][j] = 0;\n        }\n      }\n    }\n    // 设置新的 cntCellDeadCum 数组\n    setCellDeadCum(newCntCellDeadCum);\n    return newGrid;\n  }\n\n  // 重置网格\n  const handleReset = () => {\n    const newGrid = initializeGrid();\n    setGrid(newGrid);\n  };\n  // 进行单步模拟\n  const handleStepSimulation = () => {\n    const newGrid = [];\n    for (let i = 0; i < rows; i++) {\n      const newRow = [];\n      for (let j = 0; j < cols; j++) {\n        const neighbors = countAliveNeighbors(i, j);\n\n        // 根据规则更新细胞状态\n        if (grid[i][j]) {\n          if (neighbors < 2 || neighbors > 3) {\n            newRow.push(false); // 规则 1 和 3：少于2个邻居或多于3个邻居，细胞死亡\n          } else {\n            newRow.push(true); // 规则 2：2 或 3 个邻居，细胞继续存活\n          }\n        } else {\n          if (neighbors === 3 || longerLastingMode && neighbors >= 1) {\n            newRow.push(true); // 规则 4：3 个邻居，死细胞复活；或者长寿模式下有邻居，细胞继续存活\n          } else {\n            newRow.push(false);\n          }\n        }\n      }\n      newGrid.push(newRow);\n    }\n    setGrid(newGrid);\n    setLivingCells(countLivingCells(newGrid));\n\n    // newCumGrid heatmap\n    const newCumGrid = [...cntCellDeadCum];\n    // 遍历原始数组\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (newGrid[i][j] === true) {\n          newCumGrid[i][j] = 0; // 如果newGrid[i][j]为true，则将对应位置的newCumGrid设置为0\n        } else {\n          // 如果newGrid[i][j]为false，则将对应位置的cntCellDeadCum加1\n          newCumGrid[i][j] = cntCellDeadCum[i][j] + 1;\n        }\n      }\n    }\n    setCellDeadCum(newCumGrid);\n  };\n\n  // 计算细胞周围的活细胞数量\n  const countAliveNeighbors = (row, col) => {\n    let count = 0;\n    for (let i = row - 1; i <= row + 1; i++) {\n      for (let j = col - 1; j <= col + 1; j++) {\n        if (i !== row || j !== col) {\n          // 检查边界条件以避免越界访问\n          if (i >= 0 && i < rows && j >= 0 && j < cols && grid[i][j]) {\n            count++;\n          }\n        }\n      }\n    }\n    return count;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: [grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n        alive: cell,\n        cntCellDeadCum: cntCellDeadCum[rowIndex][colIndex] // 传递 cntCellDeadCum 的值给 Cell 组件\n        ,\n        onClick: () => {\n          updateCell(rowIndex, colIndex);\n          handleCellClick(rowIndex * cols + colIndex);\n        }\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStepSimulation,\n        children: \"Next Step\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleAutoplay,\n        children: autoplay ? 'Stop' : 'Auto Start'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleLongerLastingMode,\n        children: longerLastingMode ? '关闭长寿模式' : '开启长寿模式'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Living Cells: \", livingCells]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"Hct/VPJ0mQ+3v00GfxsYAsB7LMg=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","Cell","jsxDEV","_jsxDEV","Grid","rows","cols","cellStates","handleCellClick","_s","grid","setGrid","livingCells","setLivingCells","cntCellDeadCum","setCellDeadCum","autoplay","setAutoplay","longerLastingMode","setLongerLastingMode","toggleAutoplay","toggleLongerLastingMode","intervalId","setInterval","handleStepSimulation","clearInterval","initializeGrid","updateCell","row","col","newGrid","countLivingCells","newCumGrid","count","forEach","cell","Array","from","length","numClusters","Math","floor","i","clusterRow","random","clusterCol","dRow","dCol","neighborRow","neighborCol","newCntCellDeadCum","j","handleReset","newRow","neighbors","countAliveNeighbors","push","className","children","map","rowIndex","colIndex","alive","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Steven/Desktop/NEU/2024 Spring/5610 Web/Project/conways-game-of-life/src/Grid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Cell from './Cell';\n\nconst Grid = ({ rows, cols, cellStates, handleCellClick }) => {\n  const [grid, setGrid] = useState([[]]);\n  const [livingCells, setLivingCells] = useState(0);\n  const [cntCellDeadCum, setCellDeadCum] = useState([[]]); \n\n\n  const [autoplay, setAutoplay] = useState(false); // 用于跟踪自动播放的状态变量\n  const [longerLastingMode, setLongerLastingMode] = useState(false); // 新增长寿模式状态\n\n  // 切换自动播放的函数\n  const toggleAutoplay = () => {\n    setAutoplay(!autoplay);\n  };\n   // 切换长寿模式\n   const toggleLongerLastingMode = () => {\n    setLongerLastingMode(!longerLastingMode);\n  };\n\n  // 使用 useEffect 钩子来启动或停止自动播放\n  useEffect(() => {\n    let intervalId;\n    if (autoplay) {\n      // 如果自动播放激活，则设置定时器来定期调用前进模拟的函数\n      intervalId = setInterval(handleStepSimulation, 100);\n    } else {\n      // 如果自动播放停止，则清除定时器\n      clearInterval(intervalId);\n    }\n\n    // 返回清除定时器的函数，以确保在组件卸载时清除定时器\n    return () => clearInterval(intervalId);\n  }, [autoplay, grid]); // 添加所有依赖项\n\n\n  // 初始化网格状态，创建空白的网格\n  useEffect(() => {\n    setGrid(initializeGrid());\n  }, [rows, cols]);\n\n  // 更新网格状态，处理单元格点击事件\n  const updateCell = (row, col) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = !newGrid[row][col]; // 切换单元格状态\n    setGrid(newGrid);\n    setLivingCells(countLivingCells(newGrid)); \n\n   // 创建 newCumGrid 的副本\n    const newCumGrid = [...cntCellDeadCum];\n\n    // 根据条件更新 newCumGrid 的值\n    if (newGrid[row][col] === true) {\n    newCumGrid[row][col] = 0;\n    } else {\n    newCumGrid[row][col] += 1;\n    }\n    setCellDeadCum(newCumGrid)\n\n  };\n\n  // 计算当前存活细胞数量\n  const countLivingCells = (grid) => {\n    let count = 0;\n    grid.forEach(row => {\n      row.forEach(cell => {\n        if (cell) {\n          count++;\n        }\n      });\n    });\n    return count;\n  };\n\n  // 修改初始化网格的函数以实现集群设置\nfunction initializeGrid() {\n  const newGrid = Array.from({ length: rows }, () =>\n    Array.from({ length: cols }, () => false)\n  );\n\n  // 确定集群的数量和位置\n  const numClusters = Math.floor(rows * cols * 0.05); // 集群数量为网格大小的5%\n  for (let i = 0; i < numClusters; i++) {\n    const clusterRow = Math.floor(Math.random() * rows);\n    const clusterCol = Math.floor(Math.random() * cols);\n    newGrid[clusterRow][clusterCol] = true; // 将集群中心设置为活细胞\n    // 在集群周围生成更多的活细胞\n    for (let dRow = -2; dRow <= 2; dRow++) {\n      for (let dCol = -2; dCol <= 2; dCol++) {\n        const neighborRow = clusterRow + dRow;\n        const neighborCol = clusterCol + dCol;\n        if (\n          neighborRow >= 0 &&\n          neighborRow < rows &&\n          neighborCol >= 0 &&\n          neighborCol < cols &&\n          Math.random() < 0.05\n        ) {\n          newGrid[neighborRow][neighborCol] = true;\n        }\n      }\n    }\n  }\n\n  setLivingCells(countLivingCells(newGrid));\n  setCellDeadCum(Array.from({ length: rows }, () =>\n    Array.from({ length: cols }, () => 1)\n  ));\n\n  const newCntCellDeadCum = Array.from({ length: rows }, () =>\n    Array.from({ length: cols }, () => 1)\n  );\n  // 遍历 newGrid 的所有元素\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      // 如果 newGrid[i][j] 的值为真（即细胞存活），将相应位置的 newCntCellDeadCum 设置为0\n      if (newGrid[i][j] === true) {\n        newCntCellDeadCum[i][j] = 0;\n      }\n    }\n  }\n  // 设置新的 cntCellDeadCum 数组\n  setCellDeadCum(newCntCellDeadCum);\n\n  return newGrid;\n}\n\n\n  // 重置网格\n  const handleReset = () => {\n    const newGrid = initializeGrid();\n    setGrid(newGrid);\n  };\n// 进行单步模拟\nconst handleStepSimulation = () => {\n    const newGrid = [];\n  \n    for (let i = 0; i < rows; i++) {\n      const newRow = [];\n  \n      for (let j = 0; j < cols; j++) {\n        const neighbors = countAliveNeighbors(i, j);\n  \n        // 根据规则更新细胞状态\n        if (grid[i][j]) {\n          if (neighbors < 2 || neighbors > 3) {\n            newRow.push(false); // 规则 1 和 3：少于2个邻居或多于3个邻居，细胞死亡\n          } else {\n            newRow.push(true); // 规则 2：2 或 3 个邻居，细胞继续存活\n          }\n        } else {\n          if (neighbors === 3 || (longerLastingMode && neighbors >= 1)) {\n            newRow.push(true); // 规则 4：3 个邻居，死细胞复活；或者长寿模式下有邻居，细胞继续存活\n          } else {\n            newRow.push(false);\n          }\n        }\n      }\n  \n      newGrid.push(newRow);\n    }\n  \n    setGrid(newGrid);\n    setLivingCells(countLivingCells(newGrid));\n\n\n    // newCumGrid heatmap\n    const newCumGrid = [...cntCellDeadCum];\n    // 遍历原始数组\n    for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n        if (newGrid[i][j] === true) {\n        newCumGrid[i][j] = 0; // 如果newGrid[i][j]为true，则将对应位置的newCumGrid设置为0\n        } else {\n        // 如果newGrid[i][j]为false，则将对应位置的cntCellDeadCum加1\n        newCumGrid[i][j] = cntCellDeadCum[i][j] + 1;\n        }\n    }\n    }\n    setCellDeadCum(newCumGrid)\n  };\n  \n  // 计算细胞周围的活细胞数量\n  const countAliveNeighbors = (row, col) => {\n    let count = 0;\n  \n    for (let i = row - 1; i <= row + 1; i++) {\n      for (let j = col - 1; j <= col + 1; j++) {\n        if (i !== row || j !== col) {\n          // 检查边界条件以避免越界访问\n          if (i >= 0 && i < rows && j >= 0 && j < cols && grid[i][j]) {\n            count++;\n          }\n        }\n      }\n    }\n  \n    return count;\n  };\n  \n\n  return (\n    <div className=\"grid\">\n      {grid.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"grid-row\">\n          {row.map((cell, colIndex) => (\n            <Cell\n              key={colIndex}\n              alive={cell}\n              cntCellDeadCum={cntCellDeadCum[rowIndex][colIndex]} // 传递 cntCellDeadCum 的值给 Cell 组件\n              onClick={() => {\n                updateCell(rowIndex, colIndex);\n                handleCellClick(rowIndex * cols + colIndex);\n              }}\n            />\n          ))}\n        </div>\n      ))}\n      <div className=\"controls\">\n        <button onClick={handleReset}>Reset</button>\n        <button onClick={handleStepSimulation}>Next Step</button> \n         <button onClick={toggleAutoplay}>\n          {autoplay ? 'Stop' : 'Auto Start'}\n        </button>\n        <button onClick={toggleLongerLastingMode}>\n          {longerLastingMode ? '关闭长寿模式' : '开启长寿模式'}\n        </button>\n        <div>Living Cells: {livingCells}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Grid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}