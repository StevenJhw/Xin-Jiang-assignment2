{"ast":null,"code":"var _jsxFileName = \"/Users/Steven/Desktop/NEU/2024 Spring/5610 Web/Project/conways-game-of-life/src/Grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Cell from './Cell';\n\n// 导入可见光谱颜色映射对象\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colorMap = {\n  '0.00': 'rgb(255,0,255)',\n  '0.25': 'rgb(0,0,255)',\n  '0.50': 'rgb(0,255,0)',\n  '0.75': 'rgb(255,255,0)',\n  '1.00': 'rgb(255,0,0)'\n};\nconst Grid = ({\n  rows,\n  cols,\n  cellStates,\n  handleCellClick\n}) => {\n  _s();\n  const [grid, setGrid] = useState([[]]);\n\n  // 初始化网格状态，创建空白的网格\n  useEffect(() => {\n    setGrid(initializeGrid());\n  }, [rows, cols]);\n\n  // 更新网格状态，处理单元格点击事件\n  const updateCell = (row, col) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = !newGrid[row][col]; // 切换单元格状态\n    setGrid(newGrid);\n  };\n  function initializeGrid() {\n    return Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => Math.random() < 0.05));\n  }\n\n  // 根据存活时间获取相应的颜色\n  const getColorForIterations = iterations => {\n    const keys = Object.keys(colorMap).map(parseFloat);\n    const minKey = Math.min(...keys);\n    const maxKey = Math.max(...keys);\n    if (iterations <= minKey) {\n      return colorMap[minKey];\n    } else if (iterations >= maxKey) {\n      return colorMap[maxKey];\n    } else {\n      const lowerBound = keys.filter(key => key <= iterations).pop();\n      const upperBound = keys.filter(key => key >= iterations).shift();\n      const ratio = (iterations - lowerBound) / (upperBound - lowerBound);\n      const lowerColor = colorMap[lowerBound].match(/\\d+/g).map(Number);\n      const upperColor = colorMap[upperBound].match(/\\d+/g).map(Number);\n      const color = lowerColor.map((channel, index) => Math.round(channel + ratio * (upperColor[index] - channel)));\n      return `rgb(${color[0]}, ${color[1]}, ${color[2]})`;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((_, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n        style: {\n          backgroundColor: getColorForIterations(iterations[rowIndex][colIndex])\n        } // 使用存活时间获取相应的颜色\n        ,\n        alive: cellStates[rowIndex][colIndex] // 根据网格状态传递存活/死亡状态\n        ,\n        onClick: () => {\n          updateCell(rowIndex, colIndex); // 处理单元格点击事件\n          handleCellClick(rowIndex * cols + colIndex); // 调用父组件的点击处理程序\n        }\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"5Vi7HY3/aSb0piUODEQBJrixeks=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","Cell","jsxDEV","_jsxDEV","colorMap","Grid","rows","cols","cellStates","handleCellClick","_s","grid","setGrid","initializeGrid","updateCell","row","col","newGrid","Array","from","length","Math","random","getColorForIterations","iterations","keys","Object","map","parseFloat","minKey","min","maxKey","max","lowerBound","filter","key","pop","upperBound","shift","ratio","lowerColor","match","Number","upperColor","color","channel","index","round","className","children","rowIndex","_","colIndex","style","backgroundColor","alive","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Steven/Desktop/NEU/2024 Spring/5610 Web/Project/conways-game-of-life/src/Grid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Cell from './Cell';\n\n// 导入可见光谱颜色映射对象\nconst colorMap = {\n  '0.00': 'rgb(255,0,255)',\n  '0.25': 'rgb(0,0,255)',\n  '0.50': 'rgb(0,255,0)',\n  '0.75': 'rgb(255,255,0)',\n  '1.00': 'rgb(255,0,0)'\n};\n\nconst Grid = ({ rows, cols, cellStates, handleCellClick }) => {\n  const [grid, setGrid] = useState([[]]);\n\n  // 初始化网格状态，创建空白的网格\n  useEffect(() => {\n    setGrid(initializeGrid());\n  }, [rows, cols]);\n\n  // 更新网格状态，处理单元格点击事件\n  const updateCell = (row, col) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = !newGrid[row][col]; // 切换单元格状态\n    setGrid(newGrid);\n  };\n\n  function initializeGrid() {\n    return Array.from({ length: rows }, () =>\n      Array.from({ length: cols }, () => Math.random() < 0.05)\n    );\n  }\n\n  // 根据存活时间获取相应的颜色\n  const getColorForIterations = (iterations) => {\n    const keys = Object.keys(colorMap).map(parseFloat);\n    const minKey = Math.min(...keys);\n    const maxKey = Math.max(...keys);\n\n    if (iterations <= minKey) {\n      return colorMap[minKey];\n    } else if (iterations >= maxKey) {\n      return colorMap[maxKey];\n    } else {\n      const lowerBound = keys.filter(key => key <= iterations).pop();\n      const upperBound = keys.filter(key => key >= iterations).shift();\n      const ratio = (iterations - lowerBound) / (upperBound - lowerBound);\n\n      const lowerColor = colorMap[lowerBound].match(/\\d+/g).map(Number);\n      const upperColor = colorMap[upperBound].match(/\\d+/g).map(Number);\n      const color = lowerColor.map((channel, index) =>\n        Math.round(channel + ratio * (upperColor[index] - channel))\n      );\n\n      return `rgb(${color[0]}, ${color[1]}, ${color[2]})`;\n    }\n  };\n\n  return (\n    <div className=\"grid\">\n      {grid.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"grid-row\">\n          {row.map((_, colIndex) => (\n            <Cell\n              key={colIndex}\n              style={{ backgroundColor: getColorForIterations(iterations[rowIndex][colIndex]) }} // 使用存活时间获取相应的颜色\n              alive={cellStates[rowIndex][colIndex]} // 根据网格状态传递存活/死亡状态\n              onClick={() => {\n                updateCell(rowIndex, colIndex); // 处理单元格点击事件\n                handleCellClick(rowIndex * cols + colIndex); // 调用父组件的点击处理程序\n              }}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Grid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}