{"ast":null,"code":"var _jsxFileName = \"/Users/Steven/Desktop/NEU/2024 Spring/5610 Web/Project/conways-game-of-life/src/Grid.js\",\n  _s = $RefreshSig$();\n// Grid.js\nimport React, { useState, useEffect } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  rows,\n  cols,\n  cellStates,\n  handleCellClick\n}) => {\n  _s();\n  const [grid, setGrid] = useState([[]]);\n  useEffect(() => {\n    setGrid(initializeGrid());\n  }, [rows, cols]);\n  const updateCell = (row, col) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = !newGrid[row][col];\n    setGrid(newGrid);\n  };\n  function initializeGrid() {\n    return Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => Math.random() < 0.05));\n  }\n  const getColor = value => {\n    if (value === 0) return 'rgb(255,0,255)';else if (value === 0.25) return 'rgb(0,0,255)';else if (value === 0.5) return 'rgb(0,255,0)';else if (value === 0.75) return 'rgb(255,255,0)';else return 'rgb(255,0,0)';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n        alive: cell,\n        onClick: () => {\n          updateCell(rowIndex, colIndex);\n          handleCellClick(rowIndex * cols + colIndex);\n        },\n        style: {\n          backgroundColor: getColor(cell ? 1 : 0)\n        }\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"5Vi7HY3/aSb0piUODEQBJrixeks=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","Cell","jsxDEV","_jsxDEV","Grid","rows","cols","cellStates","handleCellClick","_s","grid","setGrid","initializeGrid","updateCell","row","col","newGrid","Array","from","length","Math","random","getColor","value","className","children","map","rowIndex","cell","colIndex","alive","onClick","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Steven/Desktop/NEU/2024 Spring/5610 Web/Project/conways-game-of-life/src/Grid.js"],"sourcesContent":["// Grid.js\nimport React, { useState, useEffect } from 'react';\nimport Cell from './Cell';\n\nconst Grid = ({ rows, cols, cellStates, handleCellClick }) => {\n  const [grid, setGrid] = useState([[]]);\n\n  useEffect(() => {\n    setGrid(initializeGrid());\n  }, [rows, cols]);\n\n  const updateCell = (row, col) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = !newGrid[row][col];\n    setGrid(newGrid);\n  };\n\n  function initializeGrid() {\n    return Array.from({ length: rows }, () =>\n      Array.from({ length: cols }, () => Math.random() < 0.05)\n    );\n  }\n\n  const getColor = (value) => {\n    if (value === 0) return 'rgb(255,0,255)';\n    else if (value === 0.25) return 'rgb(0,0,255)';\n    else if (value === 0.5) return 'rgb(0,255,0)';\n    else if (value === 0.75) return 'rgb(255,255,0)';\n    else return 'rgb(255,0,0)';\n  };\n\n  return (\n    <div className=\"grid\">\n      {grid.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"grid-row\">\n          {row.map((cell, colIndex) => (\n            <Cell\n              key={colIndex}\n              alive={cell}\n              onClick={() => {\n                updateCell(rowIndex, colIndex);\n                handleCellClick(rowIndex * cols + colIndex);\n              }}\n              style={{ backgroundColor: getColor(cell ? 1 : 0) }}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Grid;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,IAAI,GAAGA,CAAC;EAAEC,IAAI;EAAEC,IAAI;EAAEC,UAAU;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC5D,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdW,OAAO,CAACC,cAAc,CAAC,CAAC,CAAC;EAC3B,CAAC,EAAE,CAACP,IAAI,EAAEC,IAAI,CAAC,CAAC;EAEhB,MAAMO,UAAU,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IAC/B,MAAMC,OAAO,GAAG,CAAC,GAAGN,IAAI,CAAC;IACzBM,OAAO,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC,GAAG,CAACC,OAAO,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC;IACtCJ,OAAO,CAACK,OAAO,CAAC;EAClB,CAAC;EAED,SAASJ,cAAcA,CAAA,EAAG;IACxB,OAAOK,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEd;IAAK,CAAC,EAAE,MAClCY,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEb;IAAK,CAAC,EAAE,MAAMc,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,CACzD,CAAC;EACH;EAEA,MAAMC,QAAQ,GAAIC,KAAK,IAAK;IAC1B,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,gBAAgB,CAAC,KACpC,IAAIA,KAAK,KAAK,IAAI,EAAE,OAAO,cAAc,CAAC,KAC1C,IAAIA,KAAK,KAAK,GAAG,EAAE,OAAO,cAAc,CAAC,KACzC,IAAIA,KAAK,KAAK,IAAI,EAAE,OAAO,gBAAgB,CAAC,KAC5C,OAAO,cAAc;EAC5B,CAAC;EAED,oBACEpB,OAAA;IAAKqB,SAAS,EAAC,MAAM;IAAAC,QAAA,EAClBf,IAAI,CAACgB,GAAG,CAAC,CAACZ,GAAG,EAAEa,QAAQ,kBACtBxB,OAAA;MAAoBqB,SAAS,EAAC,UAAU;MAAAC,QAAA,EACrCX,GAAG,CAACY,GAAG,CAAC,CAACE,IAAI,EAAEC,QAAQ,kBACtB1B,OAAA,CAACF,IAAI;QAEH6B,KAAK,EAAEF,IAAK;QACZG,OAAO,EAAEA,CAAA,KAAM;UACblB,UAAU,CAACc,QAAQ,EAAEE,QAAQ,CAAC;UAC9BrB,eAAe,CAACmB,QAAQ,GAAGrB,IAAI,GAAGuB,QAAQ,CAAC;QAC7C,CAAE;QACFG,KAAK,EAAE;UAAEC,eAAe,EAAEX,QAAQ,CAACM,IAAI,GAAG,CAAC,GAAG,CAAC;QAAE;MAAE,GAN9CC,QAAQ;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOd,CACF;IAAC,GAXMV,QAAQ;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAYb,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC5B,EAAA,CA9CIL,IAAI;AAAAkC,EAAA,GAAJlC,IAAI;AAgDV,eAAeA,IAAI;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}