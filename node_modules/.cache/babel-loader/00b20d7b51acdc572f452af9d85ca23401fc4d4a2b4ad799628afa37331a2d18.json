{"ast":null,"code":"var _jsxFileName = \"/Users/Steven/Desktop/NEU/2024 Spring/5610 Web/Project/conways-game-of-life/src/Grid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = ({\n  rows,\n  cols,\n  cellStates,\n  handleCellClick\n}) => {\n  _s();\n  const [grid, setGrid] = useState([[]]);\n  const [livingCells, setLivingCells] = useState(0);\n  const [cntCellDeadCum, setCellDeadCum] = useState([[]]);\n\n  // 初始化网格状态，创建空白的网格\n  useEffect(() => {\n    setGrid(initializeGrid());\n  }, [rows, cols]);\n\n  // 更新网格状态，处理单元格点击事件\n  const updateCell = (row, col) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = !newGrid[row][col]; // 切换单元格状态\n    setGrid(newGrid);\n    setLivingCells(countLivingCells(newGrid));\n  };\n\n  // 计算当前存活细胞数量\n  const countLivingCells = grid => {\n    let count = 0;\n    grid.forEach(row => {\n      row.forEach(cell => {\n        if (cell) {\n          count++;\n        }\n      });\n    });\n    return count;\n  };\n\n  // 初始化网格\n  function initializeGrid() {\n    const newGrid = Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => Math.random() < 0.05));\n    setLivingCells(countLivingCells(newGrid));\n    setCellDeadCum(Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => 0)));\n    return newGrid;\n  }\n\n  // 重置网格\n  const handleReset = () => {\n    const newGrid = initializeGrid();\n    setGrid(newGrid);\n  };\n  // 进行单步模拟\n  const handleStepSimulation = () => {\n    const newGrid = [];\n    for (let i = 0; i < rows; i++) {\n      const newRow = [];\n      for (let j = 0; j < cols; j++) {\n        const neighbors = countAliveNeighbors(i, j);\n\n        // 根据规则更新细胞状态\n        if (grid[i][j]) {\n          if (neighbors < 2 || neighbors > 3) {\n            newRow.push(false); // 规则 1 和 3：少于2个邻居或多于3个邻居，细胞死亡\n          } else {\n            newRow.push(true); // 规则 2：2 或 3 个邻居，细胞继续存活\n          }\n        } else {\n          if (neighbors === 3) {\n            newRow.push(true); // 规则 4：3 个邻居，死细胞复活\n          } else {\n            newRow.push(false);\n          }\n        }\n      }\n      newGrid.push(newRow);\n    }\n    setGrid(newGrid);\n    setLivingCells(countLivingCells(newGrid));\n\n    // newCumGrid heatmap\n    const newCumGrid = Array.from({\n      length: rows\n    }, () => Array.from({\n      length: cols\n    }, () => 0));\n\n    // 遍历原始数组\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (newGrid[i][j] === true) {\n          newCumGrid[i][j] = 0; // 如果newGrid[i][j]为true，则将对应位置的newCumGrid设置为0\n        } else {\n          // 如果newGrid[i][j]为false，则将对应位置的cntCellDeadCum加1\n          cntCellDeadCum[i][j] += 1;\n        }\n      }\n    }\n    setCellDeadCum(newCumGrid);\n  };\n\n  // 计算细胞周围的活细胞数量\n  const countAliveNeighbors = (row, col) => {\n    let count = 0;\n    for (let i = row - 1; i <= row + 1; i++) {\n      for (let j = col - 1; j <= col + 1; j++) {\n        if (i !== row || j !== col) {\n          // 检查边界条件以避免越界访问\n          if (i >= 0 && i < rows && j >= 0 && j < cols && grid[i][j]) {\n            count++;\n          }\n        }\n      }\n    }\n    return count;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: [grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n        alive: cell,\n        onClick: () => {\n          updateCell(rowIndex, colIndex);\n          handleCellClick(rowIndex * cols + colIndex);\n        }\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStepSimulation,\n        children: \"Next Step\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Living Cells: \", livingCells]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"4wCXU0ST4d6KET8S0eG32QVnZSI=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useState","useEffect","Cell","jsxDEV","_jsxDEV","Grid","rows","cols","cellStates","handleCellClick","_s","grid","setGrid","livingCells","setLivingCells","cntCellDeadCum","setCellDeadCum","initializeGrid","updateCell","row","col","newGrid","countLivingCells","count","forEach","cell","Array","from","length","Math","random","handleReset","handleStepSimulation","i","newRow","j","neighbors","countAliveNeighbors","push","newCumGrid","className","children","map","rowIndex","colIndex","alive","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Steven/Desktop/NEU/2024 Spring/5610 Web/Project/conways-game-of-life/src/Grid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Cell from './Cell';\n\nconst Grid = ({ rows, cols, cellStates, handleCellClick }) => {\n  const [grid, setGrid] = useState([[]]);\n  const [livingCells, setLivingCells] = useState(0);\n  const [cntCellDeadCum, setCellDeadCum] = useState([[]]);\n\n\n  // 初始化网格状态，创建空白的网格\n  useEffect(() => {\n    setGrid(initializeGrid());\n  }, [rows, cols]);\n\n  // 更新网格状态，处理单元格点击事件\n  const updateCell = (row, col) => {\n    const newGrid = [...grid];\n    newGrid[row][col] = !newGrid[row][col]; // 切换单元格状态\n    setGrid(newGrid);\n    setLivingCells(countLivingCells(newGrid));\n  };\n\n  // 计算当前存活细胞数量\n  const countLivingCells = (grid) => {\n    let count = 0;\n    grid.forEach(row => {\n      row.forEach(cell => {\n        if (cell) {\n          count++;\n        }\n      });\n    });\n    return count;\n  };\n\n  // 初始化网格\n  function initializeGrid() {\n    const newGrid = Array.from({ length: rows }, () =>Array.from({ length: cols }, () => Math.random() < 0.05));\n    setLivingCells(countLivingCells(newGrid));\n    setCellDeadCum(Array.from({ length: rows }, () => Array.from({ length: cols }, () => 0)));\n    return newGrid;\n  }\n\n  // 重置网格\n  const handleReset = () => {\n    const newGrid = initializeGrid();\n    setGrid(newGrid);\n  };\n// 进行单步模拟\nconst handleStepSimulation = () => {\n    const newGrid = [];\n  \n    for (let i = 0; i < rows; i++) {\n      const newRow = [];\n  \n      for (let j = 0; j < cols; j++) {\n        const neighbors = countAliveNeighbors(i, j);\n  \n        // 根据规则更新细胞状态\n        if (grid[i][j]) {\n          if (neighbors < 2 || neighbors > 3) {\n            newRow.push(false); // 规则 1 和 3：少于2个邻居或多于3个邻居，细胞死亡\n          } else {\n            newRow.push(true); // 规则 2：2 或 3 个邻居，细胞继续存活\n          }\n        } else {\n          if (neighbors === 3) {\n            newRow.push(true); // 规则 4：3 个邻居，死细胞复活\n          } else {\n            newRow.push(false);\n          }\n        }\n      }\n  \n      newGrid.push(newRow);\n    }\n  \n    setGrid(newGrid);\n    setLivingCells(countLivingCells(newGrid));\n\n\n    // newCumGrid heatmap\n    const newCumGrid = Array.from({ length: rows }, () => Array.from({ length: cols }, () => 0));\n\n    // 遍历原始数组\n    for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n        if (newGrid[i][j] === true) {\n        newCumGrid[i][j] = 0; // 如果newGrid[i][j]为true，则将对应位置的newCumGrid设置为0\n        } else {\n        // 如果newGrid[i][j]为false，则将对应位置的cntCellDeadCum加1\n        cntCellDeadCum[i][j] += 1;\n        }\n    }\n    }\n    setCellDeadCum(newCumGrid)\n  };\n  \n  // 计算细胞周围的活细胞数量\n  const countAliveNeighbors = (row, col) => {\n    let count = 0;\n  \n    for (let i = row - 1; i <= row + 1; i++) {\n      for (let j = col - 1; j <= col + 1; j++) {\n        if (i !== row || j !== col) {\n          // 检查边界条件以避免越界访问\n          if (i >= 0 && i < rows && j >= 0 && j < cols && grid[i][j]) {\n            count++;\n          }\n        }\n      }\n    }\n  \n    return count;\n  };\n  \n\n  return (\n    <div className=\"grid\">\n      {grid.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"grid-row\">\n          {row.map((cell, colIndex) => (\n            <Cell\n              key={colIndex}\n              alive={cell}\n              onClick={() => {\n                updateCell(rowIndex, colIndex);\n                handleCellClick(rowIndex * cols + colIndex);\n              }}\n            />\n          ))}\n        </div>\n      ))}\n      <div className=\"controls\">\n        <button onClick={handleReset}>Reset</button>\n        <button onClick={handleStepSimulation}>Next Step</button>\n        <div>Living Cells: {livingCells}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Grid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}